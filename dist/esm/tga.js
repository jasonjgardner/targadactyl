/**
 * @license tga-js 1.0.0
 * Copyright (c) 2013-2019 Vincent Thibault, Inc.
 * License: MIT
 */
const e=0,t=1,a=3,r=9,o=10,h=11,s=0,g=2,l=3,n=4,p=48;export default class{_checkHeader(){const t=this.header;if(t.imageType===e)throw Error("No data");if(t.hasColorMap){if(t.colorMapLength>256||24!==t.colorMapDepth||1!==t.colorMapType)throw Error("Invalid colormap for indexed type")}else if(t.colorMapType)throw Error("Why does the image contain a palette ?");if(!t.width||!t.height)throw Error("Invalid image size");if(8!==t.pixelDepth&&16!==t.pixelDepth&&24!==t.pixelDepth&&32!==t.pixelDepth)throw Error('Invalid pixel size "'+t.pixelDepth+'"')}_decodeRLE(e,t,a,r){const o=new Uint8Array(r),h=new Uint8Array(a);let s=0;for(;s<r;){const r=e[t++];let g=1+(127&r);if(128&r){for(let r=0;r<a;++r)h[r]=e[t+r];t+=a;for(let e=0;e<g;++e)o.set(h,s),s+=a}else{g*=a;for(let a=0;a<g;++a)o[s+a]=e[t+a];i+=g,t+=g}}return o}_getImageData8bits(e,t,a,r,i,o,h,s,g,l){for(let n=0,p=i;p!==h;p+=o)for(let i=s;i!==l;i+=g,n++){const o=t[n];e[4*(i+r*p)+3]=255,e[4*(i+r*p)+2]=a[3*o+0],e[4*(i+r*p)+1]=a[3*o+1],e[4*(i+r*p)+0]=a[3*o+2]}return e}_getImageData16bits(e,t,a,r,i,o,h,s,g,l){for(let a=0,n=i;n!==h;n+=o)for(let i=s;i!==l;i+=g,a+=2){const o=t[a+0]|t[a+1]<<8;e[4*(i+r*n)+0]=(31744&o)>>7,e[4*(i+r*n)+1]=(992&o)>>2,e[4*(i+r*n)+2]=(31&o)>>3,e[4*(i+r*n)+3]=32768&o?0:255}return e}_getImageData24bits(e,t,a,r,i,o,h,s,g,l){for(let a=0,n=i;n!==h;n+=o)for(let i=s;i!==l;i+=g,a+=3)e[4*(i+r*n)+3]=255,e[4*(i+r*n)+2]=t[a+0],e[4*(i+r*n)+1]=t[a+1],e[4*(i+r*n)+0]=t[a+2];return e}_getImageData32bits(e,t,a,r,i,o,h,s,g,l){for(let a=0,n=i;n!==h;n+=o)for(let i=s;i!==l;i+=g,a+=4)e[4*(i+r*n)+2]=t[a+0],e[4*(i+r*n)+1]=t[a+1],e[4*(i+r*n)+0]=t[a+2],e[4*(i+r*n)+3]=t[a+3];return e}_getImageDataGrey8bits(e,t,a,r,i,o,h,s,g,l){for(let a=0,n=i;n!==h;n+=o)for(let i=s;i!==l;i+=g,a++){const o=t[a];e[4*(i+r*n)+0]=o,e[4*(i+r*n)+1]=o,e[4*(i+r*n)+2]=o,e[4*(i+r*n)+3]=255}return e}_getImageDataGrey16bits(e,t,a,r,i,o,h,s,g,l){for(let a=0,n=i;n!==h;n+=o)for(let i=s;i!==l;i+=g,a+=2)e[4*(i+r*n)+0]=t[a+0],e[4*(i+r*n)+1]=t[a+0],e[4*(i+r*n)+2]=t[a+0],e[4*(i+r*n)+3]=t[a+1];return e}open(e,t){req=new XMLHttpRequest,req.open("GET",e,!0),req.responseType="arraybuffer",req.onload=(()=>{200===this.status&&(this.load(new Uint8Array(req.response)),t&&t())}),req.send(null)}load(e){let i=0;if(e.length<18)throw Error("Not enough data to contain header");const s={idLength:e[i++],colorMapType:e[i++],imageType:e[i++],colorMapIndex:e[i++]|e[i++]<<8,colorMapLength:e[i++]|e[i++]<<8,colorMapDepth:e[i++],offsetX:e[i++]|e[i++]<<8,offsetY:e[i++]|e[i++]<<8,width:e[i++]|e[i++]<<8,height:e[i++]|e[i++]<<8,pixelDepth:e[i++],flags:e[i++]};if(s.hasEncoding=s.imageType===r||s.imageType===o||s.imageType===h,s.hasColorMap=s.imageType===r||s.imageType===t,s.isGreyColor=s.imageType===h||s.imageType===a,this.header=s,this._checkHeader(),(i+=s.idLength)>=e.length)throw Error("No data");if(s.hasColorMap){const t=s.colorMapLength*(s.colorMapDepth>>3);this.palette=e.subarray(i,i+t),i+=t}const g=s.pixelDepth>>3,l=s.width*s.height,n=l*g;s.hasEncoding?this.imageData=this_.decodeRLE(e,i,g,n):this.imageData=e.subarray(i,i+(s.hasColorMap?l:n))}getImageData(e){var t,a,r,i,o,h,d,c=this.header.width,m=this.header.height,f=(this.header.flags&p)>>n;switch(e||(e=document?document.createElement("canvas").getContext("2d").createImageData(c,m):{width:c,height:m,data:new Uint8ClampedArray(c*m*4)}),f===g||f===l?(i=0,o=1,h=m):(i=m-1,o=-1,h=-1),f===g||f===s?(t=0,a=1,r=c):(t=c-1,a=-1,r=-1),this.header.pixelDepth){case 8:d=this.header.isGreyColor?this._getImageDataGrey8bits:this._getImageData8bits;break;case 16:d=this.header.isGreyColor?this._getImageDataGrey16bits:this._getImageData16bits;break;case 24:d=this._getImageData24bits;break;case 32:d=this._getImageData32bits}return d.call(this,e.data,this.imageData,this.palette,c,i,o,h,t,a,r),e}getCanvas(){var e,t,a;return a=(t=(e=document.createElement("canvas")).getContext("2d")).createImageData(this.header.width,this.header.height),e.width=this.header.width,e.height=this.header.height,t.putImageData(this.getImageData(a),0,0),e}getDataURL(e){return this.getCanvas().toDataURL(e||"image/png")}}
